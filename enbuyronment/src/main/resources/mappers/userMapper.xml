<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.itwill.enbuyronment.mapper.UserMapper">

	<!-- 회원가입 동작 -->
	<insert id="join">
		insert into user(uid, pass, email, name, phone, jumin)
		values (#{uid}, #{pass}, #{email}, #{name}, #{phone}, #{jumin})
	</insert>
	<insert id="initAddr">
		insert into address(postcode, addr, dt_addr, ex_addr, uid, receiver)
		values (#{postcode}, #{addr}, #{dtAddr}, #{exAddr}, #{uid}, #{receiver})
	</insert>
	
	<!-- 로그인 유저 조회 -->
	<select id="login" resultType="UserVO">
		select * from user
		where uid = #{uid} and pass = #{pass}
	</select>
	
	<!-- 아이디 찾기 동작 -->
	<select id="findId" resultType="String">
		select uid from user where name = #{name} and email = #{email}
	</select>
	
	<!-- 비밀번호 수정 동작 -->
	<update id="modPw">
		update user set pass = #{pass} where uid = #{uid}
	</update>
	
	<!-- 회원정보 조회 (비밀번호 찾기 시) 동작 -->
	<select id="getUser" resultType="UserVO">
		select * from user where uid = #{uid}
	</select>
	
	<!-- 회원 주소목록 조회 동작 -->
	<select id="getUserAddr" resultType="AddressVO">
		select * from address where uid = #{uid}
	</select>
	
	<!-- 회원 배송지(1개) 조회 동작 -->
	<select id="getOneAddr" resultType="AddressVO">
		select * from address where uid = #{uid} and addr_name = #{addrName}
	</select>
	
	<!-- 회원 탈퇴 동작 -->
	<delete id="delUser">
		delete from user
		where uid = #{uid} and pass = #{pass}
	</delete>
	
	<!-- 회원 정보 수정 동작 -->
	<update id="modUser">
		update user set 
		<if test="pass != null"> 
			pass = #{pass},
		</if>  email = #{email}, phone = #{phone}, name = #{name}
		where uid = #{uid}
	</update>

	<!-- 회원 쓴 리뷰 목록 가져오기 동작 -->
	<select id="getUserReviews" resultType="ProdAndReviewVO">
		select p.prod_no, p.prod_name, p.thumb, r.uid, r.star, r.comment, r.regdate, r.review_no
		from product p right join review r
		on p.prod_no = r.prod_no
		where r.uid = #{uid}
		order by review_no desc limit #{pageStart}, #{perDataCnt}
	</select>
	
	<!-- 배송지 추가 -->
	<insert id="insertAddr">
		insert into address (addr_name, uid, postcode, addr, dt_addr, ex_addr, status, receiver)
		values (#{addrName}, #{uid}, #{postcode}, #{addr}, #{dtAddr}, #{exAddr}, #{status}, #{receiver})
	</insert>
	
	<!-- 배송지 삭제 -->
	<delete id="delAddr">
		delete from address
		where uid = #{uid} and addr_name = #{addrName}
	</delete>
	
	<!-- 기본 배송지에서 일반 배송지로 변경 -->
	<update id="toNormalAddr">
		update address set status = 1
		where uid = #{uid} and status = 0
	</update>
	
	<!-- 일반 배송지에서 기본 배송지로 변경 -->
	<update id="toDefaultAddr">
		update address set status = 0
		where uid = #{uid} and addr_name = #{addrName}
	</update>
	
	<!-- 유저가 쓴 리뷰 총 개수 가져오기 -->
	<select id="getReviewTotalCnt" resultType="Integer">
		select count(*) from review
		where uid = #{uid}
	</select>
	
	<!-- 리뷰 삭제 -->
	<delete id="delReview">
		delete from review
		where review_no = #{reviewNo}
	</delete>
	
	<!-- 리뷰 한개 가져오기(수정을 위해) -->
	<select id="getReview" resultType="ProdAndReviewVO">
		select p.prod_no, p.prod_name, p.thumb, r.uid, r.star, r.comment, r.regdate, r.review_no
		from product p right join review r
		on p.prod_no = r.prod_no
		where r.review_no = #{reviewNo}
	</select>
	
	<!-- 리뷰 수정하기 -->
	<update id="modReview">
		update review set comment = #{comment}, star = #{star}
		where review_no = #{reviewNo}
	</update>
	
	<!-- 기존에 있는 리뷰인지 확인(상품 하나당 리뷰 한개만 가능하게 하기 위해) -->
	<select id="isPresentReview" resultType="boolean">
		select if(count(*) = 1, 1, 0)
		from review
		where uid = #{uid} and prod_no = #{prodNo}
	</select>
	
	<!-- 리뷰 작성 -->
	<insert id="writeReview">
		insert into review (uid, prod_no, star, comment)
		values (#{uid}, #{prodNo}, #{star}, #{comment})
	</insert>
	
	<!-- 유저 주문 내역 총 개수 -->
	<select id="getUserOrderTotalCnt" resultType="Integer">
		select count(*) 
		from order_detail
		where uid = #{uid}
	</select>
	
	<!-- 유저 주문 내역 목록 중 주문번호 가져오기 -->
	<select id="getUserOrders" resultType="OrderVO">
		select * 
		from order_detail
		where uid = #{uid}
		order by order_date desc limit #{pageStart}, #{perDataCnt}
	</select>
	
	<!-- 유저의 주문번호당 상품목록 가져오기 -->
	<select id="getProdsByOrderNo" resultType="OrderProdVO">
		select *
		from order_product
		where order_no = #{orderNo}
	</select>
	
	<!-- 유저가 주문취소 -->
	<update id="cancelOrder">
		update order_detail
		set status = "주문 취소"
		where order_no =  #{orderNo} and uid = #{uid}
	</update>
	
</mapper> 